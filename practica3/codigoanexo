//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		CÓDIGO DEL FICHERO reversi8.c (FRAGMENTO)
//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// muestra uno de los cuadrantes del zoom
void display_zoom(void) {
	Lcd_Clr();
	Lcd_Active_Clr();
	display_cuadricula(CHAR_HOR, CHAR_VER, DIM / 2, tamano_casilla * 2, x, y);
	dibujar_fichas_tablero(tablero, x, y, DIM / 2, CHAR_HOR, CHAR_VER,
			tamano_casilla * 2);
	Lcd_Dma_Trans();
}

// comprueba en que casilla a pulsado el usuario.
// recibe las coordenadas puls x, puls y
// parpadea durante unos segundos mientras los cuales el usuario puede cancelar
// la eleccion.
// si no se detiene se confirma la eleccion
void zoom_pulsar(int puls_x, int puls_y) {
	// calcular posicion en tablero completo (8, 8)
	int nueva_casilla_x = (puls_x - CHAR_HOR) / (tamano_casilla * 2);
	puls_y = LCD_YSIZE - puls_y;
	int nueva_casilla_y = (puls_y - CHAR_VER) / (tamano_casilla * 2);
	nueva_casilla_x += x;
	nueva_casilla_y += y;

	// dibuja tablero completo
	display_tablero();
	// dibuja ficha
	dibujar_ficha(BLACK, (nueva_casilla_x * tamano_casilla) + CHAR_HOR,
			(nueva_casilla_y * tamano_casilla) + CHAR_VER, tamano_casilla);
	Lcd_Dma_Trans();

	// varaibles detencion
	int intervalo = 2000000;
	int inicio_tiempo = timer2_leer();

	// varaibles parpadeo
	int intervalo_parapdeo = 500000;
	int inicio_parpadeo = timer2_leer();
	int esta_oculto = 0;

	int detenido = 0;
	int detectar_pulsacion = ultima_pulsacion();
	int actual_time=0;

	do {
		// parpadear...

		if (actual_time - inicio_parpadeo > intervalo_parapdeo) {
			inicio_parpadeo = timer2_leer(); // REINICIAR CONTADOR
			if (esta_oculto == 0) {	// ocultar
				dibujar_ficha(WHITE,
						(nueva_casilla_x * tamano_casilla) + CHAR_HOR,
						(nueva_casilla_y * tamano_casilla) + CHAR_VER,
						tamano_casilla);
				Lcd_Dma_Trans();
				esta_oculto = 1;
			} else {					// mostrar
				dibujar_ficha(BLACK,
						(nueva_casilla_x * tamano_casilla) + CHAR_HOR,
						(nueva_casilla_y * tamano_casilla) + CHAR_VER,
						tamano_casilla);
				Lcd_Dma_Trans();
				esta_oculto = 0;
			}
		}

		if (detectar_pulsacion != ultima_pulsacion()) {
			detenido = 1;
		}
		if (izq_pulsado == 1) {
			izq_pulsado = 0;
			detenido = 1;
		}
		if (dech_pulsado == 1) {
			dech_pulsado = 0;
			detenido = 1;
		}
		actual_time=timer2_leer();
	} while ((actual_time - inicio_tiempo < intervalo) && detenido == 0);

	// si no lo han detenido confirmamos
	if (detenido == 0) {
		eleccion_hecha = 1;
		cuenta_fila = nueva_casilla_x;
		cuenta_col = nueva_casilla_y;
	}

}

// devuelve 1 si se ha pulsado en el boton pasar
int pulsa_en_pasar(int puls_x, int puls_y) {
	int boton_x = CHAR_HOR + (tamano_casilla * DIM) + DIM;
	int boton_y_abajo = CHAR_VER*3;
	int boton_y_arriba = boton_y_abajo + (CHAR_VER*2);
	if( puls_x > boton_x && puls_y > boton_y_abajo && puls_y < boton_y_arriba){
		return 1;
	}else{
		return 0;
	}
}

// devuelve 1 si se ha pulsado en el boton fin
int pulsa_en_fin(int puls_x, int puls_y) {
	int boton_x = CHAR_HOR + (tamano_casilla * DIM) + DIM;
	int boton_y_abajo = CHAR_VER;
	int boton_y_arriba = boton_y_abajo + (CHAR_VER*2);
	if( puls_x > boton_x && puls_y > boton_y_abajo && puls_y < boton_y_arriba){
		return 1;
	}else{
		return 0;
	}
}

// devuelve 1 si se ha pulsado dentro del tablero
int pulsa_en_tablero(int puls_x, int puls_y) {
	if (puls_x < CHAR_HOR + (DIM * tamano_casilla)) {
		return 1;
	} else {
		return 0;
	}
}

///////////////////////////////////////////////////////////////////
// comprueba si se ha pulsado para hacer zoom o fuera del tablero
void comprobar_pulsacion_zoom(int puls_x, int puls_y) {

	// SI PULSA ABAJO
	if (puls_y < CHAR_VER + ((DIM * tamano_casilla)) / 2) {
		if (puls_x < CHAR_HOR + ((DIM * tamano_casilla)) / 2) {
			x = 0;
			y = 4;
			display_zoom();
		} else {
			x = 4;
			y = 4;
			display_zoom();
		}
		// SI PULSA ARRIBA
	} else {
		if (puls_x < CHAR_HOR + ((DIM * tamano_casilla)) / 2) {
			x = 0;
			y = 0;
			display_zoom();
		} else {
			x = 4;
			y = 0;
			display_zoom();
		}
	}
}

// dibuja un rectangulo de ucColor en las coordenadas indicadas
void dibujar_ficha(INT8U ucColor, int coor_x, int coor_y, int tamanyo) {
	LcdClrRect(coor_x + 2, coor_y + 2, (coor_x) + (tamanyo - 2),
			(coor_y) + (tamanyo - 2), ucColor);
}

// inicio_coor_x, inicio_coor_y : posicion de la esquina superior izquirda del tablero a mostrar
// dimension es altura y anchura del tablero en casillas (8 o 4 con zoom)
// inicio_x, inicio_y: poscion del tablero desde donde se muestra (para zoom)
void dibujar_fichas_tablero(unsigned char tablero[][DIM], int inicio_x, int inicio_y,
		int dimension, int inicio_coor_x, int inicio_coor_y,
		int tamanyo_casilla) {
	int i = 0;
	int j = 0;
	for (i = 0; i < dimension; i++) {
		for (j = 0; j < dimension; j++) {
			if (tablero[inicio_x + i][inicio_y + j] == FICHA_BLANCA) {
				dibujar_ficha(LIGHTGRAY, inicio_coor_x + (tamanyo_casilla * i),
						inicio_coor_y + (tamanyo_casilla * j), tamanyo_casilla);
			}
			if (tablero[inicio_x + i][inicio_y + j] == FICHA_NEGRA) {
				dibujar_ficha(BLACK, inicio_coor_x + (tamanyo_casilla * i),
						inicio_coor_y + (tamanyo_casilla * j), tamanyo_casilla);
			}
		}
	}
}


// elimina la zona de la pantalla donde se incluyen los tiempos
// y actualiza con los nuevos valores de 
// tiempo calculos y tiempo total.
void display_tiempo(int coor_x, int coor_y, int lon) {
	INT8U* tiempo = (INT8U*) "Tiempo";
	INT8U* total = (INT8U*) "total:";
	INT8U* calculos = (INT8U*) "calculos:";
	INT8U* total_ch = (INT8U*) "";

	// BORRAMOS ESA ZONA DE LA PANTALLA
	LcdClrRect(coor_x, coor_y, coor_x + (lon * CHAR_HOR),
			coor_y + (CHAR_VER * 7), WHITE);

	Lcd_DspAscII8x16(coor_x, coor_y, BLACK, tiempo);
	Lcd_DspAscII8x16(coor_x, coor_y + CHAR_VER, BLACK, total);

	volatile int time_aux = tiempo_total;
    int cont = 0;
    int i=0;
    while (time_aux > 0) {
        time_aux /= 10;
        cont++;
    }
    if( cont < 1) cont=  1;
    time_aux=tiempo_total;
    while(cont!=0){
		int pow = cont-1;
		int potencia=1;
		while (pow != 0){
			potencia=potencia*10;
			pow--;
		}
		int number = time_aux/potencia;
		cont--;

		Lcd_DspAscII8x16(coor_x+(i*CHAR_HOR), coor_y + (CHAR_VER) * 2, BLACK, itoa(total_ch,10,number,10));
		i++;

		time_aux%=potencia;
	}

    time_aux = tiempo_calculos;
       cont = 0;
        i=0;
        while (time_aux > 0) {
            time_aux /= 10;
            cont++;
        }
        if( cont < 1) cont=  1;
        time_aux=tiempo_calculos;
        while(cont!=0){
    		int pow = cont-1;
    		int potencia=1;
    		while (pow != 0){
    			potencia=potencia*10;
    			pow--;
    		}
    		int number = time_aux/potencia;
    		cont--;

    		Lcd_DspAscII8x16(coor_x+(i*CHAR_HOR), coor_y + (CHAR_VER) * 6, BLACK, itoa(total_ch,10,number,10));
    		i++;

    		time_aux%=potencia;
    	}


	Lcd_DspAscII8x16(coor_x, coor_y + (CHAR_VER) * 4, BLACK, tiempo);
	Lcd_DspAscII8x16(coor_x, coor_y + (CHAR_VER) * 5, BLACK, calculos);

}



// muestra una cuadricula 
// recibe:
//	las coordenadas de la esquina superior izquierda
//	la dimension del tablero
//	el tamaño de una cuadricula
void display_cuadricula(int coor_x, int coor_y, int dimension, int tamanyo,
		int inicio_hor, int inicio_ver) {
	char inicio_numero_hor = '0' + inicio_hor;
	char inicio_numero_ver = '0' + inicio_ver;
	int i = 0;
	for (i = 0; i < dimension + 1; i++) {	// verticales
		if (i < dimension) {
			char disp[] = { i + inicio_numero_ver, 0x0 };
			Lcd_DspAscII8x16(0, (tamanyo * i) + CHAR_VER, BLACK, (INT8U*) disp);
		}
		//Lcd_Draw_Line(CHAR_HOR, (tamanyo*i)+CHAR_VER, , , 10, 2);
		Lcd_Draw_VLine(coor_y, (tamanyo * dimension) + coor_y,
				(tamanyo * i) + coor_x, 10, 2);

	}
	for (i = 0; i < dimension + 1; i++) {	// horizontales
		if (i < dimension) {
			char disp[] = { i + inicio_numero_hor, 0x0 };
			Lcd_DspAscII8x16((tamanyo * i) + CHAR_HOR, 0, BLACK, (INT8U*) disp);
		}
		//Lcd_Draw_Line((tamanyo*i)+CHAR_HOR,CHAR_VER, (tamanyo*i)+CHAR_HOR, (tamanyo*dimension)+CHAR_VER,  10, 2);
		Lcd_Draw_HLine(coor_x, (tamanyo * dimension) + coor_x,
				(tamanyo * i) + coor_y, 10, 2);
	}
}

void display_boton(int x, int y, INT8U* msg, int leng){
	Lcd_Draw_Box(x, y, x + (CHAR_HOR*leng), y + (CHAR_VER*2), BLACK);
	Lcd_DspAscII8x16(x + CHAR_HOR, y + CHAR_VER/2 , BLACK, msg);
}



// muestra un tablero con los componentes:
//	cuadricula
//	fichas de tablero
//	tiempos
//	botones pasar y finalizar
void display_tablero(void) {

	/* clear screen */
	Lcd_Clr();
	Lcd_Active_Clr();


	INT8U* pucChar1 = (INT8U*) "Pulse o introduzca (8,8)";
	Lcd_DspAscII8x16(0, LCD_YSIZE - CHAR_VER, BLACK, pucChar1);
	tamano_casilla = (LCD_YSIZE - 2*CHAR_VER) / DIM;
		display_cuadricula(CHAR_HOR, CHAR_VER, DIM, tamano_casilla, 0, 0);
	
	dibujar_fichas_tablero(tablero, 0, 0, DIM, CHAR_HOR, CHAR_VER,
			tamano_casilla);
	display_tiempo((CHAR_HOR * 4) + (tamano_casilla * DIM), CHAR_VER, 9);

	display_boton(CHAR_HOR + (tamano_casilla * DIM) + DIM, (tamano_casilla * DIM)-CHAR_VER*4,(INT8U*) "PASAR",11);
	display_boton( CHAR_HOR + (tamano_casilla * DIM) + DIM , (tamano_casilla * DIM)-CHAR_VER,(INT8U*) "FINALIZAR", 11);
	Lcd_Dma_Trans();
}


// muestra la pantalla inicial
// la funcion termina cuando se pulsa un boton o la pantalla
void pantalla_inicial() {
	Lcd_Clr();
	Lcd_Active_Clr();
	INT8U* pucChar1 = (INT8U*) "Toque la pantalla para jugar";
	Lcd_DspAscII8x16((LCD_XSIZE / 2) - (CHAR_HOR * 13), LCD_YSIZE / 2, BLACK,
			pucChar1);
	Lcd_Dma_Trans();
	int detectar_pulsacion = ultima_pulsacion();
	while (detectar_pulsacion == ultima_pulsacion() && izq_pulsado == 0
			&& dech_pulsado == 0) {
		// esperamos a que pulse
	}
	if (izq_pulsado == 1) {
		izq_pulsado = 0;
	}
	if (dech_pulsado == 1) {
		dech_pulsado = 0;
	}
}

// muestra la pantalla final con la puntuacion de fichas blancas y negras
void pantalla_final(){
		Lcd_Clr();
		Lcd_Active_Clr();
		INT8U* fin = (INT8U*) "Fin de la partida";
		INT8U* fiblancas = (INT8U*) "Fichas blancas:";
		INT8U* finegras = (INT8U*) "Fichas negras:";
		INT8U* vacio = (INT8U*) "";
		int inicio_y = (LCD_YSIZE/2) - (CHAR_VER*5);
		int inicio_x = (LCD_XSIZE / 2) - (CHAR_HOR * 13);
		Lcd_DspAscII8x16(inicio_x, inicio_y, BLACK,
			fin);
		Lcd_DspAscII8x16(inicio_x, inicio_y + CHAR_VER*2, BLACK,
			fiblancas);
		Lcd_DspAscII8x16(inicio_x + (CHAR_HOR*16), inicio_y + CHAR_VER*2, BLACK,
			itoa(vacio,10,blancas,10));
		Lcd_DspAscII8x16(inicio_x, inicio_y + CHAR_VER*3, BLACK,
			finegras);
		Lcd_DspAscII8x16(inicio_x + (CHAR_HOR*16), inicio_y + CHAR_VER*3, BLACK,
			itoa(vacio,10,negras,10));
		Lcd_Dma_Trans();
}


void esperar_mov() {
		eleccion_hecha = 0;
	int esta_en_zoom = 0;
	int detectar_pulsacion = ultima_pulsacion();
	int puls_x = 0;
	int puls_y = 0;
	int estado_anterior = 0;

	// actualiza el tablero
	display_tablero();
	tiempo_total=timer2_leer_nonprec();
	int anterior_tiempo=tiempo_total;
	while (eleccion_hecha == 0) {
		////////////////////////////////////////////////////////////////////
		if(tiempo_total!=anterior_tiempo){
			display_tiempo((CHAR_HOR * 4) + (tamano_casilla * DIM), CHAR_VER, 9);
			Lcd_Dma_Trans();
		}

		if (detectar_pulsacion != ultima_pulsacion()) {	// se ha pulsado la pantalla
			puls_x = (pulsacion_X_CORD() - Xmin) * LCD_XSIZE / (Xmax - Xmin);
			puls_y = (pulsacion_Y_CORD() - Ymin) * LCD_YSIZE / (Ymax - Ymin);
			if(pulsa_en_fin(puls_x, puls_y)){
				fin = 1;
				// para que salga del bucle
				eleccion_hecha = 1;
				cuenta_fila = 8;
				cuenta_col = 8;
				estado_juego = eleccion_ya_hecha;
			}
			if (pulsa_en_pasar(puls_x, puls_y) == 1) {
				eleccion_hecha = 1;
				cuenta_fila = 8;
				cuenta_col = 8;
				estado_juego = eleccion_ya_hecha;
			}
			else if (pulsa_en_tablero(puls_x, puls_y) == 1 && !esta_en_zoom) {
				// guardamos estado al que volver
				estado_anterior = estado_juego;
				esta_en_zoom = 1;
				estado_juego = zoom;
			} else {
				if (pulsa_en_tablero(puls_x, puls_y) == 1 && esta_en_zoom) {
					esta_en_zoom = 0;
					estado_juego = zoom_pulsado;
				}else if(pulsa_en_tablero(puls_x, puls_y) == 0 && esta_en_zoom){
					display_tablero();
					esta_en_zoom = 0;
				}
			}

			// actualizamos para que no vuelva a entrar
			detectar_pulsacion = ultima_pulsacion();
		}
		///////////////////////////////////////////////////////////////////

		switch (estado_juego) {
		case 0:	// estado inicial
			if (izq_pulsado == 1 || dech_pulsado == 1) {
				izq_pulsado = 0;
				dech_pulsado = 0;
				eleccion_hecha = 0;
				D8Led_symbol(0x000f);
				estado_juego = espera_fila;
			}
			break;
		case 1:	// espera fila
			if (izq_pulsado == 1) {
				izq_pulsado = 0;
				cuenta_fila = 0;
				D8Led_symbol(cuenta_fila & 0x000f);
				estado_juego = aumenta_fila;
			}
			break;
		case 2: //aumenta fila
			if (izq_pulsado == 1) {
				izq_pulsado = 0;
				if (cuenta_fila < 8) {
					cuenta_fila++;
				} else {
					cuenta_fila = 0;
				}
				D8Led_symbol(cuenta_fila & 0x000f);
			} else if (dech_pulsado == 1) {
				dech_pulsado = 0;
				D8Led_symbol(0x000c);
				estado_juego = espera_col;
			}
			break;
		case 3: // espera columna
			if (izq_pulsado == 1) {
				izq_pulsado = 0;
				cuenta_col = 0;
				D8Led_symbol(cuenta_col & 0x000f);
				estado_juego = aumenta_col;
			}
			break;
		case 4: // aumenta columna
			if (izq_pulsado == 1) {
				izq_pulsado = 0;
				if (cuenta_col < 8) {
					cuenta_col++;
				} else {
					cuenta_col = 0;
				}
				D8Led_symbol(cuenta_col & 0x000f);
			} else if (dech_pulsado == 1) {
				dech_pulsado = 0;
				if (cuenta_col != cuenta_fila
						&& (cuenta_col == 8 || cuenta_fila == 8)) {
					// datos incorrectos
					cuenta_col = 0;
					cuenta_fila = 0;
				} else {
					eleccion_hecha = 1;
				}
				estado_juego = inicial_juego;
			}
			break;
		case 5:	/////////////////////////////// estado zoom
			comprobar_pulsacion_zoom(puls_x, puls_y); // comprueba el recuadro pulsado (x,y)
			display_zoom();	 // dibuja el reacuadro (0,0)(0,4)(4,0)(4,4)
			estado_juego = estado_anterior;
			break;
		case 6: /////////////////////////////// estado zoom pulsado
			zoom_pulsar(puls_x, puls_y);
			estado_juego = inicial_juego;
			break;
		case 7: /////////////////////////////// estado eleccion ya hecha
			// no se hace nada
			break;
		default:
			break;
		}
		anterior_tiempo=tiempo_total;
		tiempo_total=timer2_leer_nonprec();
	}

	eleccion_hecha = 0;

}


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		CÓDIGO DEL FICHERO timer2.c (FRAGMENTO)
//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void timer2_ISR(void)
{
	timer2_num++;

	/* borrar bit en I_ISPC para desactivar la solicitud de interrupción*/
	rF_ISPC = BIT_TIMER2; // BIT_TIMER0 está definido en 44b.h y pone un uno en el bit 13 que correponde al Timer0
}

void timer2_inicializar(void)
{
	/* Configuraion controlador de interrupciones */
	rINTMSK &= ~(BIT_GLOBAL | BIT_TIMER2); // Emascara todas las lineas excepto Timer0 y el bit global (bits 26 y 13, BIT_GLOBAL y BIT_TIMER0 están definidos en 44b.h)

	/* Establece la rutina de servicio para TIMER2*/
	pISR_FIQ = (unsigned*) timer2_ISR;

	/* Configura el Timer2 */
	rTCFG0 |= 0x0000;   // PREESCALADO ajusta el preescalado
	rTCFG1 |= 0x00;   // DIVISOR selecciona la entrada del mux que proporciona el reloj. La 00 corresponde a un divisor de 1/2.
	rTCNTB2 = 65535;// CADA PAR DE REG valor inicial de cuenta (la cuenta es descendente)
	rTCMPB2 = 12800;// valor de comparación
	/* establecer update=manual (bit 1) + inverter=on (ṡ? será inverter off un cero en el bit 2 pone el inverter en off)*/

}

/**
 * reinicia cuenta de tiempo y comienza a medir
 */
void timer2_empezar(void){

		/* valor inicial de la cuenta*/

		rTCNTB2 = 65535;	// CADA PAR DE REG valor inicial de cuenta (la cuenta es descendente)

		/* iniciar timer (bit 0) con auto-reload (bit 3)*/

		rTCON &= ~(0xF000);
		rTCON |= 0x2000;	// CONTROL TEMP
		rTCON &= ~(0x2000);
		rTCON |= 0x9000;

		timer2_num = 0;

}

int timer2_leer(void){
	int actual = (rTCNTB2-rTCNTO2);
	return ((timer2_num*rTCNTB2)+actual)*0.03;
}

int timer2_leer_nonprec(void){
	return timer2_num*0.0021;
}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		CÓDIGO DEL FICHERO button.c (FRAGMENTO)
//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void Eint4567_ISR(void) {

	///////////////////////////////////////////////////////
	//rINTMSK &= ~BIT_EINT4567;

	/* Identificar la interrupcion (hay dos pulsadores)*/

	int which_int = rEXTINTPND;
	rI_ISPC=0x1;
	rINTMSK |= BIT_EINT4567;



	if (desplazar_bits(rPDATG, 6) == 0 && desplazar_bits(rINTPND, 21) == 1) { //rPDATG & 0x0020
		push_debug(6, which_int);
		//int_count++; // incrementamos el contador
		//D8Led_symbol(int_count & 0x000f); // sacamos el valor por pantalla (m�dulo 16)
		izq_pulsado = 1;
		id_boton = 6;		// pulsador 1 EXINT 6
		cuenta_trp = 25;	// inicia cuenta contador
		estado = trp;		// estado 1
	} else if (desplazar_bits(rPDATG, 7) == 0	&& desplazar_bits(rINTPND, 21) == 1) {
		//int_count--; // decrementamos el contador
		//D8Led_symbol(int_count & 0x000f); // sacamos el valor por pantalla (m�dulo 16)
		push_debug(7, which_int);
		dech_pulsado = 1;		// pulsador 2 EXINT 7
		id_boton = 7;		// pulsador 2 EXINT 7
		cuenta_trp = 25;	// inicia cuenta contador7
		estado = trp;		// estado 1
	}
	else{
		rINTMSK &= ~BIT_EINT4567;
	}

	////////////////////////////////////////

	/* Finalizar ISR */

	rEXTINTPND = 0xf;		// borra los bits en EXTINTPND
	rI_ISPC |= BIT_EINT4567;		// borra el bit pendiente en INTPND
}


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//		CÓDIGO DEL FICHERO timer.c (FRAGMENTO)
//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

/*--- codigo de las funciones ---*/
void timer_ISR(void) {
	switch_leds = 1;
	rI_ISPC |= BIT_TIMER0;
	////////////////////////////////////////////////////
	// maquina de estados
	switch (estado) {
	case 1: //estado espera
		if (cuenta_trp > 0) {
			cuenta_trp--;
		} else {
			cuenta_medio=300;
			estado = espera_soltar;
		}
		break;
	case 2:
		if (id_boton == 6 && desplazar_bits(rPDATG, 6) == 1) {
			push_debug(8, 4);
			cuenta_trd = 25;	// inicia cuenta contador
			estado = trd;		// estado 1
		} else if (id_boton == 7 && desplazar_bits(rPDATG, 7) == 1) {
			push_debug(9, 8);
			cuenta_trd = 25;	// inicia cuenta contador
			estado = trd;		// estado 1
		} else {
			if (cuenta_medio <= 0) {
				if (id_boton == 6 && desplazar_bits(rPDATG, 6) == 0) {
					push_debug(1, 4);
					int_count++;
				} else {
					push_debug(2, 8);
					int_count--;
				}
				//D8Led_symbol(int_count & 0x000f); // sacamos el valor por pantalla (m�dulo 16)
				cuenta_medio = 300;
			} else {
				cuenta_medio--;
			}
		}
		break;
	case 3:
		if (cuenta_trd > 0) {
			cuenta_trd--;
		} else {
			rINTMSK |= (BIT_TIMER0);
			rEXTINTPND = 0xf;				// borra los bits en EXTINTPND
			rI_ISPC |= BIT_EINT4567;		// borra el bit pendiente en INTPND
			estado = espera;
			rINTMSK &= ~(BIT_EINT4567); // habilitamos pulsador
			rINTMSK &= ~(BIT_TIMER0);
		}
		break;
	default:
		break;
	}
